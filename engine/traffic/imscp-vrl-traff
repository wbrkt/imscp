#!/usr/bin/perl

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2014 by internet Multi Server Control Panel
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# @category    i-MSCP
# @copyright   2010-2014 by i-MSCP | http://i-mscp.net
# @author      Daniel Andreca <sci2tech@gmail.com>
# @author      Laurent Declercq <l.declercq@nuxwin.com>
# @link        http://i-mscp.net i-MSCP Home Site
# @license     http://www.gnu.org/licenses/gpl-2.0.html GPL v2

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/..", "$FindBin::Bin/../PerlLib", "$FindBin::Bin/../PerlVendor";

use iMSCP::Debug;
use iMSCP::Boot;
use iMSCP::Mail;
use iMSCP::Servers;

# Turn off localisation features to force any command output to be in english
$ENV{'LC_MESSAGES'} = 'C';

# Do not clear screen at end of script
$ENV{'IMSCP_CLEAR_SCREEN'} = 0;

newDebug('imscp-vrl-traff.log');

silent(1);

umask(027);

iMSCP::Boot->getInstance()->boot({ 'norequirements' => 'yes', 'nolock' => 'yes', 'config_readonly' => 'yes' });

sub run
{
	my $rs = 0;
	my $timestamp = time;
	my %traffic;

	# timestamp has floor down for the last half'n our to make timestamps in server_traffic and domain_traffic the same
	$timestamp = $timestamp - ($timestamp % 1800);

	my $database = iMSCP::Database->new()->factory();

	# Getting list of all domains (dmn|sub|als|alssub)
	my $domains = $database->doQuery(
		'domain_name',
		"
			SELECT
				`domain_id`, `domain_name`
			FROM
				`domain`
			UNION
			SELECT
				`domain_id`, `alias_name`
			FROM
				`domain_aliasses`
			UNION
			SELECT
				`domain_id`, CONCAT(`subdomain_name`, '.', `domain_name`)
			FROM
				`subdomain`
			LEFT JOIN
				`domain` USING (`domain_id`)
			UNION
			SELECT
				`domain_id`, CONCAT(`subdomain_alias_name`, '.', `alias_name`)
			FROM
				`subdomain_alias`
			LEFT JOIN
				`domain_aliasses` USING (`alias_id`)
		"
	);
	unless (ref $domains eq 'HASH') {
		error($domains);
		iMSCP::Mail->new()->errmsg($domains);
		$rs = 1;
	} elsif(%{$domains}) {
		# Getting server list
		my @servers = iMSCP::Servers->getInstance()->get();

		# For each domain (dmn|sub|als|alssub)
		for (keys %{$domains}) {
			my $domainName = $_;
			my $domainId = $domains->{$_}->{'domain_id'};

			# For each server (ftpd|httpd|mta|po)
			for (@servers) {
				s/\.pm//;
				my $file = "Servers/$_.pm";
				my $class = "Servers::$_";

				require $file;
				my $instance = $class->factory();

				if($instance->can('getTraffic')) {
					debug("Calling Servers::$_\::getTraffic() method for $domainName");
					$traffic{$domainId}->{$_} = $instance->getTraffic($domainName);
				}
			}
		}

		if(%traffic) {
			for (keys %traffic) {
				next unless
					exists $traffic{$_}->{'httpd'} ||
					exists $traffic{$_}->{'ftpd'} ||
					exists $traffic{$_}->{'mta'} ||
					exists $traffic{$_}->{'po'};

				my $result = iMSCP::Database->new()->factory()->doQuery(
					'dtraff_id',
					'
						SELECT
							`dtraff_id`
						FROM
							`domain_traffic`
						WHERE
							`domain_id` = ?
						AND
							`dtraff_time` >= UNIX_TIMESTAMP(CURRENT_DATE())
						LIMIT 1
					',
					$_
				);
				unless (ref $result eq 'HASH') {
					error($result);
					iMSCP::Mail->new()->errmsg($result);
					$rs = 1;
				} else {
					unless (%{$result}) {
						$result = $database->doQuery(
							'insert',
							'
								INSERT INTO `domain_traffic` (
									`domain_id`, `dtraff_time`, `dtraff_web`, `dtraff_ftp`, `dtraff_mail`, `dtraff_pop`
								) VALUES (
									?, ?, ?, ?, ?, ?
								)
							',
							$_,
							$timestamp,
							exists $traffic{$_}->{'httpd'} ? $traffic{$_}->{'httpd'} : 0,
							exists $traffic{$_}->{'ftpd'} ? $traffic{$_}->{'ftpd'} : 0,
							exists $traffic{$_}->{'mta'} ? $traffic{$_}->{'mta'} : 0,
							exists $traffic{$_}->{'po'} ? $traffic{$_}->{'po'} : 0
						);
						unless (ref $result eq 'HASH'){
							error($result);
							iMSCP::Mail->new()->errmsg($result);
							$rs = 1;
						}
					} else {
						$result = $database->doQuery(
							'update',
							'
								UPDATE
									`domain_traffic`
								SET
									`dtraff_web` = `dtraff_web` + ?, `dtraff_ftp` = `dtraff_ftp` + ?,
									`dtraff_mail` = `dtraff_mail` + ?, `dtraff_pop` = `dtraff_pop` + ?, `dtraff_time` = ?
								WHERE
									`domain_id` = ?
								AND
									`dtraff_id` = ?
                        	',
							exists $traffic{$_}->{'httpd'} ? $traffic{$_}->{'httpd'} : 0,
							exists $traffic{$_}->{'ftpd'} ? $traffic{$_}->{'ftpd'} : 0,
							exists $traffic{$_}->{'mta'} ? $traffic{$_}->{'mta'} : 0,
							exists $traffic{$_}->{'po'} ? $traffic{$_}->{'po'} : 0,
							$timestamp,
							$_,
							(keys %{$result})[0]
						);
						unless (ref $result eq 'HASH'){
							error($result);
							iMSCP::Mail->new()->errmsg($result);
							$rs = 1;
						}
					}
				}
			}
		}
	}

	$rs;
}

exit run();
